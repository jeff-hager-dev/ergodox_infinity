import serial
from time import sleep
from math import floor
import sys,tty,termios


# Function to read input, shamelessly stolen from
# http://stackoverflow.com/questions/22397289/finding-the-values-of-the-arrow-keys-in-python-why-are-they-triples
class _Getch:
	def __call__(self):
			fd = sys.stdin.fileno()
			old_settings = termios.tcgetattr(fd)
			try:
				tty.setraw(sys.stdin.fileno())
				ch = sys.stdin.read(3)
			finally:
				termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
			return ch


# Clears the screen
def clear(ser):
	ser.write(bytes("lcdInit\r".encode("ascii")))
	sleep(0.1)
	return


# Prints an image by only printing the blocks containing black pixels
# The screen should have been cleared first
def logo(array, ser):
	for x in range(0, 64, 1):
		for y in range(0, 4, 1):
			# Each block consists of 4 bytes of value
			val1 = array[y * 128 + 2 * x]
			val2 = array[y * 128 + 2 * x + 1]
			# If any of those bytes is non-zero, we print it
			if val1 != 0 or val2 != 0:
				command = "lcdDisp "  + hex(y) + " " + hex(2 * x) + " " + hex(val1) + " " + hex(val2) + " \r"
				ser.write(bytes(command.encode('ascii')));
				sleep(0.03);
	return

# Sets the color of the screen, r, g and b values should be between 0 and 4095
def setColor(r, g, b, ser):
	command = "lcdColor " + hex(r) + " " + hex(g) + " " + hex(b) + "\r"
	ser.write(bytes(command.encode('ascii')))
	sleep(0.03)


# Prints a 8x8 block on the screen, either all black, either all white
def printBlock(i, j, value, ser):
	if i < 0 or i > 15:
		return
	if j < 0 or j > 3:
		return

	hexval = "0x00"
	if value == 1:
		hexval = "0xFF"
	for x in range(i * 8, i * 8 + 7):
		command = "lcdDisp " + hex(j) + " " + hex(x) + " " + hexval + " " + hexval + "\r"
		ser.write(bytes(command.encode('ascii')))
		sleep(0.03)
	return

# Prints a snake, where snake_x and snake_y contain the x and y indices of the blocks composing the snake
def printSnake(snake_x, snake_y, ser):
	clear(ser)
	for i in range(len(snake_x)):
		printBlock(snake_x[i], snake_y[i], 1, ser)
	return

# Moves the snake by reading an arrow key, updating snake_x and snake_y and checking for collision
# Inspired from http://stackoverflow.com/questions/22397289/finding-the-values-of-the-arrow-keys-in-python-why-are-they-triples
def moveSnake(snake_x, snake_y, ser):
	inkey = _Getch()

	# We get the tail of the snake that we will make disappear
	tail_x = snake_x[0]
	tail_y = snake_y[0]

	# We "propagate" the snake
	for i in range(3):
		snake_x[i] = snake_x[i + 1]
		snake_y[i] = snake_y[i + 1]
	# We read the next position
	while(1):
			k=inkey()
			if k!='':break
	if k=='\x1b[A':
			snake_y[3] += 1
	elif k=='\x1b[B':
			snake_y[3] -= 1
	elif k=='\x1b[C':
			snake_x[3] += 1 
	elif k=='\x1b[D':
			snake_x[3] -= 1 
	else:
			return 1

	printBlock(tail_x, tail_y, 0, ser) # Clearing the tail
	printBlock(snake_x[3], snake_y[3], 1, ser) # Printing the new head

	# Checking if entering a wall
	if (snake_x[3] > 15 or snake_y[3] > 3 or snake_x[3] < 0 or snake_y[3] < 0):
		setColor(4095, 0, 0, ser)
		return 1

	# Checking if entering itself
	for i in range(3):
		if (snake_x[i] == snake_x[3] and snake_y[i] == snake_y[3]):
			setColor(4095, 0, 0, ser)
			return 1

	return 0




if __name__ == '__main__':
	# Opening the serial connection with the ergodox screen
	ser = serial.Serial(port='/dev/ttyACM0')


	# Ergodox logo
	ergodox = [
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x30, 0x70, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x60, 0xe0, 0x00, 0x70, 0xf0, 0xc0, 0x01, 0x07, 0x0f, 0x0d, 0xf9, 0xf1, 0xe1, 0x63, 0xfe, 0xfc, 0xc0, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0x60, 0x60, 0xf0, 0xe0, 0x60, 0x40, 0x00, 0xe0, 0xf0, 0xf0, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x70, 0xe0, 0x80, 0xe0, 0xfc, 0x7c, 0x06, 0x06, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3c, 0x78, 0x40, 0xc3, 0xff, 0xfe, 0xf6, 0x46, 0xc6, 0xc4, 0xe0, 0xc0, 0x00, 0x0c, 0x0f, 0x0f, 0x1c, 0x0c, 0x1c, 0x18, 0x00, 0x03, 0x07, 0x0c, 0x18, 0x1b, 0x1f, 0x1c, 0x10, 0x01, 0x07, 0x0f, 0x0c, 0x18, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x1f, 0x3f, 0xfe, 0xe0, 0x00, 0x01, 0x07, 0x0f, 0x0c, 0x18, 0x1f, 0x1f, 0x0e, 0x00, 0x04, 0x0c, 0x1d, 0x1f, 0x0f, 0x06, 0x0c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	]


	# Display of the logo
	clear(ser)
	setColor(2095, 4095, 1095, ser)
	logo(ergodox, ser)
	sleep(0.5)

	# Display of the snake
	setColor(0, 4095, 0, ser)
	snake_x = [i for i in range(4)]
	snake_y = [0 for j in range(4)]

	# Update loop
	printSnake(snake_x, snake_y, ser)
	while(moveSnake(snake_x, snake_y, ser) == 0):
		a = 1 # Very ugly

	# Closing the serial connection
	ser.close()

